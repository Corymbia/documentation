<?xml version="1.0" encoding="UTF-8"?>
<!--This work by Eucalyptus Systems is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License. See the accompanying LICENSE file for more information.-->
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="console_upgrade_console">
    <title>Upgrade the Management Console Behind an ELB</title>
    <shortdesc>This section describes the process for deploying the console behind a load balancer (ELB).
    </shortdesc>
    
    <taskbody>
        
        <context>
            <p>To run the console behind a load balancer:</p>
        </context>
        <steps>
            <step>
                <cmd>Create a load balancer. For more information, see <xref href="../user-guide/elb_examples_basic_config.dita"></xref>.</cmd>
                <substeps>
                    <substep>
                        <cmd>Leave the default listener port on 80.</cmd>
                        <info>
                            <note>Don't change the listener to port 443 at this point yet, since you
                                will need an SSL certificate first.</note>
                        </info>
                    </substep>
                    <substep>
                        <cmd>Define the health check to use HHTP/443 and path of <codeph>/</codeph>.</cmd>
                    </substep>
                    <substep>
                        <cmd>Select the zone or zones you wish to use for your scaling group(s).</cmd>
                        <info><codeblock>PROVIDE SAMPLE REPRESENTING COMBINED STEPS HERE WOULD BE NICE</codeblock></info>
                    </substep>
                    
                </substeps>
            </step>
            <step>
                <cmd>Create an SSL certificate using the ELB public DNS name, or configure a DNS record pointing to the ELB,
                    and use that DNS name in your SSL certficate. For more information on creating a server certificate, go to <xref
                        href="http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/ssl-server-cert.html#create-cert"
                        scope="external" format="html">AWS SSL Certificates for Elastic Load Balancing</xref>.</cmd>
            </step>
          
            <step>
                <cmd>Add a listener to the ELB for HTTP/443 on the client and instance side, using the SSL certificate you just 
                    created in the previous step.</cmd>
                <info><codeblock>PROVIDE SAMPLE REPRESENTING WHAT THAT LOOKS LIKE HERE WOULD BE NICE</codeblock></info>
            </step>
            <step>
                <cmd>Create a security group for scaling group (console servers) which you will use in your launch configuration. </cmd>
                <substeps>
                    <substep>
                        <cmd>Open port ports 80 and 443 to incoming traffic from the security group being used by the ELB.</cmd>
                        <info><codeblock>PROVIDE EXAMPLE HERE WOULD BE NICE</codeblock></info>
                    </substep>
                </substeps>
            </step>
            <step>
                <cmd>Create launch configuration using the <codeph>cloud-init script</codeph> in <filepath>user-data</filepath>:</cmd>
            <substeps>
                <substep>
                    <cmd>Use a CentOS 6 image.</cmd>
                </substep>
            <substep>
                <cmd>Use at least the minimum server specification of 4 cores and 8GB of memory. In this example, we use m3.2xlarge with 4 
                    cores and 4G memory.</cmd>
            </substep>
            <substep>
                <cmd>Modify the 10th line in the cloud-init script to use the cloud back-end FQDN in place of the name already there.</cmd>
                <info>
                    <codeblock>9th line sample from script would be great here
10th line sample from script would be great here
11th line sample from script would be great here</codeblock> 
                </info>
                <stepresult>Near the bottom of the <codeph>cloud-init</codeph> script are two random keys. Generate your own to ensure some uniqueness 
                    in your session cookie encryption.</stepresult>
            </substep>
            <substep>
                <cmd>On CentOS, run the following to create a new random 32-character string:</cmd>
                <info>
                    <codeblock>"cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1"</codeblock>
                </info>
                <stepresult><b>Provide outcome screen here would be nice.</b></stepresult>
            </substep>
            </substeps>
            </step>
            <step>
                <cmd>Create an autoscaling group that uses this launch configuration and the ELB.</cmd>
                <info><note>You might want to set a propagating tag to label instances in this autoscaling group. 
                    If you want to manually scale this group, you can start with min/desired/max set to <codeph>1</codeph>, 
                    but adjust desired/max to reflect the number of instances you'd like. A better way is to set up scaling 
                    policies: one to scale up, another to scale down based on CPU load. Sustained CPU load over 90% is usually 
                    a good sign you want to add another instance. Sustained CPU load under 40% likely means you can remove an instance.</note></info>
                <info><codeblock>PROVIDE SAMPLE REPRESENTING WHAT THAT LOOKS LIKE HERE WOULD BE NICE</codeblock></info>
                
                <stepresult>At this point, you will see one instance being launched and in a couple of minutes, it will show healthy 
                    and <i>in-service</i> in the ELB, at which point, you can start using the console. 
                <b>PROVIDE SAMPLE</b>
                </stepresult>
                
            </step>
        </steps>
        
    </taskbody>
    
</task>
