<?xml version="1.0" encoding="UTF-8"?>
<!--This work by Eucalyptus Systems is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License. See the accompanying LICENSE file for more information.-->
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="setting_up_dns">
	<title>Configure <ph conref="../shared/conrefs.dita#prod/product"/> DNS</title>
	<shortdesc><ph conref="../shared/conrefs.dita#prod/product"/> provides a DNS service that maps
		service names, bucket names, and more to IP addresses. This section details how to configure
		the <ph conref="../shared/conrefs.dita#prod/product"/> DNS service.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
	<indexterm>configuring<indexterm>DNS</indexterm>
	  <indexterm>subdomains</indexterm>
	</indexterm>
	<indexterm>DNS <indexterm>configuring</indexterm>
	  <indexterm>delegation</indexterm>
	  <indexterm>IP mapping</indexterm>
	</indexterm>
      </keywords>
    </metadata>
  </prolog>

  <taskbody>
    <context>
    	<note type="important"><ph conref="../shared/conrefs.dita#prod/product"/> administration tools are designed to work with DNS-enabled clouds, so configuring this
				service is highly recommended. The remainder of this guide is written with the
				assumption that your cloud is DNS-enabled.</note>
      <p>The DNS service will automatically try to bind to port 53. If port 53 cannot be used, DNS
	will be disabled. Typically, other system services like dnsmasq are configured to run on
	port 53. To use the <ph conref="../shared/conrefs.dita#prod/product"/> DNS service, you must disable these services.</p>
    </context>

  </taskbody>
  <task id="setting_up_dns_subd">
    <title>Configure the Domain and Subdomain</title>
    <taskbody>
      <context>
      	<p>Before using the DNS service, configure the DNS subdomain name that you want <ph
						conref="../shared/conrefs.dita#prod/product"/> to handle using the steps
					that follow.</p>
      </context>
      <steps>
	<step>
	  <cmd>Log in to the CLC and enter the following:</cmd>
	  <info>
	    <codeblock>euctl system.dns.dnsdomain=mycloud.example.com</codeblock>
	  </info>
	</step>
	<step>
	  <cmd>You can configure the load balancer DNS subdomain. To do so, log in to the CLC and enter the
						following:</cmd>
	  <info>
	    <codeblock>euctl services.loadbalancing.dns_subdomain=lb</codeblock>
	  </info>
	</step>
      </steps>
    </taskbody>
  </task>
  <task id="setting_up_dns_map">
    <title>Turn on IP Mapping</title>
    <taskbody>
      <context>
	<p>To enable mapping of instance IPs to DNS host names:</p>
      </context>
      <steps>
	<step>
	  <cmd>Enter the following command on the CLC:</cmd>
	  <info>
	    <codeblock>euctl bootstrap.webservices.use_instance_dns=true</codeblock>

	  	<p>When this option is enabled, public and private DNS entries are created for each launched
							instance in <ph conref="../shared/conrefs.dita#prod/product"/>. This
							also enables virtual hosting for Walrus. Buckets created in Walrus can
							be accessed as hosts. For example, the bucket <codeph>mybucket</codeph>
							is accessible as
								<codeph>mybucket.objectstorage.mycloud.example.com</codeph>. </p> <p>Instance IP addresses will be mapped as
								<codeph>euca-A-B-C-D.eucalyptus.mycloud.example.com</codeph>, where
								<codeph>A-B-C-D</codeph> is the IP address (or addresses) assigned
							to your instance. </p>
	  </info>
	</step>
	<step>
	  <cmd>If you want to modify the subdomain that is reported as part of the instance DNS name, enter the following command:</cmd>
	  <info>
	    <codeblock>euctl cloud.vmstate.instance_subdomain=.custom-dns-subdomain</codeblock>
	    <p>When this value is modified, the public and private DNS names reported for each instance
							will contain the specified custom DNS subdomain name, instead of the
							default value, which is <codeph>eucalyptus</codeph>. For example, if
							this value is set to <codeph>foobar</codeph>, the instance DNS names
							will appear as
							<codeph>euca-A-B-C-D.foobar.mycloud.example.com</codeph>.</p>
	  	<note>The code example above correctly begins with "." before <codeph>custom-dns-subdomain</codeph>.</note>
	  </info>
	</step>
      </steps>
    </taskbody>
  </task>
  <task id="setting_up_dns_del">
    <title>Enable DNS Delegation</title>
    <taskbody>
      <context>
      	<p>DNS delegation allows you to forward DNS traffic for the <ph
						conref="../shared/conrefs.dita#prod/product"/> subdomain to the <ph
						conref="../shared/conrefs.dita#prod/product"/> CLC host. This host acts as a
					name server. This allows interruption-free access to <ph
						conref="../shared/conrefs.dita#prod/product"/> cloud services in the event
					of a failure. The CLC host is capable of mapping cloud host names to IP
					addresses of the CLC and UFS / OSG host machines.</p>
	<p>For example, if the IP address of the CLC is <codeph>192.0.2.5</codeph>, and the IP address of
					Walrus is <codeph>192.0.2.6</codeph>, the host
						<codeph>compute.mycloud.example.com</codeph> resolves to
						<codeph>192.0.2.5</codeph> and
						<codeph>objectstorage.mycloud.example.com</codeph> resolves to
						<codeph>192.0.2.6</codeph>.</p>
	<p>To enable DNS delegation:</p>
      </context>
      <steps>
	<step>
	  <cmd>Enter the following command on the CLC:</cmd>
	  <info>
	    <codeblock>euctl bootstrap.webservices.use_dns_delegation=true</codeblock>
	  </info>
	</step>
      </steps>
    </taskbody>
  </task>
  <task id="setting_up_dns_master">
    <title>Configure the Master DNS Server</title>
    <taskbody>
      <context>
      	<p>Set up your master DNS server to delegate the <ph
						conref="../shared/conrefs.dita#prod/product"/> subdomain to the UFS host
					machines, which act as name servers.</p>
      	<p>The following example shows how the Linux name server <codeph>bind</codeph> is set up to
					delegate the <ph conref="../shared/conrefs.dita#prod/product"/> subdomain.</p>
      </context>
      <steps>
	<step>
	  <cmd>Open <filepath>/etc/named.conf</filepath> and set up the <codeph>example.com</codeph> zone.
						For example, your <filepath>/etc/named.conf</filepath> may look like the
						following:</cmd>
	  <info>
	    <codeblock>zone "example.com" IN {
	      type master;
	      file "/etc/bind/db.example.com";
	      };
	    </codeblock>
	  </info>
	</step>
	<step>
					<cmd>Create <filepath>/etc/bind/db.example.com</filepath> if it does not exist.
						If your master DNS is already set up for <codeph>example.com</codeph>, you
						will need to add a name server entry for UFS host machines. For
						example:</cmd>
					<info>
						<codeblock>$ORIGIN example.com.
$TTL 604800

@ IN    SOA ns1 admin.example.com 1 604800 86400 2419200 604800
        NS  ns1
ns1     A   MASTER.DNS.SERVER_IP
ufs1    A   UFS1_IP
mycloud NS  ufs1</codeblock>
						<p>After this, you will be able to resolve your instances' public DNS names
							such as
							<codeph>euca-A-B-C-D.eucalyptus.mycloud.example.com</codeph>.</p>
					</info>
				</step>
	<step>
		<cmd>Restart the bind nameserver <codeph>service named restart</codeph>.</cmd>
	</step>
	<step>
					<cmd>Verify your setup by pointing <filepath>/etc/resolv.conf</filepath> on your
						client to your primary DNS server and attempt to resolve
							<codeph>compute.example.com</codeph> using ping or nslookup. It should
						return the IP address of a UFS host machine.</cmd>
				</step>
      </steps>
    </taskbody>
  </task>

  <task id="experimental_dns_options">
    <title>Advanced DNS Options</title>
    <taskbody>
      <context>
      	<p>Recursive lookups and split-horizon DNS are available in <ph conref="../shared/conrefs.dita#prod/product"/>.</p>
      </context>
      <steps>
	<step>
	  <cmd>To enable any of the DNS resolvers, set
	    <codeph>dns.enabled</codeph> to <codeph>true</codeph>.</cmd>
	</step>
	<step>
	  <cmd>To enable the recursive DNS resolver, set
	    <codeph>dns.recursive.enabled</codeph> to <codeph>true</codeph>.</cmd>
	</step>
	<step>
	  <cmd>To enable split-horizon DNS resolution for internal instance public DNS name queries,
	    set <codeph>dns.split_horizon.enabled</codeph> to
	    <codeph>true</codeph>.</cmd>
	</step>
      </steps>
    </taskbody>
  </task>
	<task id="config_dns_spoof_aws_endpoints">
		<title>Optional: Configure Eucalyptus DNS to Spoof AWS Endpoints</title>
		<taskbody>
			<context>
				<p>You can configure instances to use AWS region FQDNs for service endpoints by enabling DNS spoofing.</p>
			</context>
			<steps>
				<step>
					<cmd>Set up a Eucalyptus cloud with Eucalyptus DNS and HTTPS endpoints. When creating CSR, make sure and add 
						Subject Alternative Names for all the supported AWS services for the given region thatâ€™s being tested. 
						For example:</cmd>
					<info><codeblock>$ openssl req -in wildcard.c-06.autoqa.qa1.eucalyptus-systems.com.csr 
						-noout -text | less X509v3 Subject Alternative Name:
     DNS:ec2.us-east-1.amazonaws.com, DNS:autoscaling.us-east-1.amazonaws.com, 
     DNS:cloudformation.us-east-1.amazonaws.com, DNS:monitoring.us-east-1.amazonaws.com, 
     DNS:elasticloadbalancing.us-east-1.amazonaws.com, DNS:s3.amazonaws.com, 
     DNS:sts.us-east-1.amazonaws.com</codeblock></info>
				</step>
				<step>
					<cmd>Set DNS spoofing:</cmd>
					<info><codeblock>[root@d-17 ~]#  euctl dns.spoof_regions --region euca-admin@future
dns.spoof_regions.enabled = true
dns.spoof_regions.region_name =
dns.spoof_regions.spoof_aws_default_regions = true
dns.spoof_regions.spoof_aws_regions = true</codeblock></info>
				</step>
				<step>
					<cmd>Launch an instance, and allow SSH access.</cmd>
				</step>
				<step>
					<cmd>SSH into the instance and install AWS CLI.</cmd>
					<info><codeblock>ubuntu@euca-172-31-12-59:~$ sudo apt-get install -y python-pip
ubuntu@euca-172-31-12-59:~$ sudo -H pip install --upgrade pip
ubuntu@euca-172-31-12-59:~$ sudo -H pip install --upgrade awscli</codeblock></info>
				</step>
				<step>
					<cmd>Run <codeph>aws configure</codeph> and set access and secret key information 
						if not using instance profile.</cmd>
				</step>
				<step>
					<cmd>Confirm AWS CLI works with HTTPS Eucalyptus service endpoint:</cmd>
					<info><codeblock>ubuntu@euca-172-31-12-59:~$ aws --ca-bundle euca-ca-0.crt 
--endpoint-url https://ec2.c-06.autoqa.qa1.eucalyptus-systems.com/ ec2 describe-key-pairs
{
    "KeyPairs": [
        {
            "KeyName": "devops-admin",
            "KeyFingerprint": "ee:4f:93:a8:87:8d:80:8d:2c:d6:d5:60:20:a3:2d:b2"
        }
    ]
}</codeblock></info>
				</step>
				<step>
					<cmd>Test against AWS FQDN service endpoint that matches one of the SANs in the signed certificate:</cmd>
					<info><codeblock>ubuntu@euca-172-31-12-59:~$ aws --ca-bundle euca-ca-0.crt 
--endpoint-url https://ec2.us-east-1.amazonaws.com ec2 describe-key-pairs{
    "KeyPairs": [
        {
            "KeyName": "devops-admin",
            "KeyFingerprint": "ee:4f:93:a8:87:8d:80:8d:2c:d6:d5:60:20:a3:2d:b2"
        }
    ]
}				</codeblock></info>
				</step>
			</steps>
			
			
		</taskbody>
	</task>
</task>
