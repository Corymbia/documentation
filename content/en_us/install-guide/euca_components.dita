<?xml version="1.0" encoding="UTF-8"?>
<!--This work by Eucalyptus Systems is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License. See the accompanying LICENSE file for more information.-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="euca_components">
	<title><ph conref="../shared/conrefs.dita#prod/product"/> Components</title>
	<shortdesc>This topic describes the various components that comprise a <ph conref="../shared/conrefs.dita#prod/product"/> cloud.</shortdesc>
	<prolog>
		<metadata>
			<keywords>
				<indexterm>components <indexterm>about</indexterm>
				</indexterm>
			</keywords>
		</metadata>
	</prolog>

	<conbody>
		<!--	DOC-1542 need new architectural diagrams 
			Source of below diagram:  updated to include eucanetd
			https://eucalyptus.atlassian.net/wiki/pages/viewpage.action?pageId=125730836
		-->
		<p>The following image shows a high-level architecture of <ph conref="../shared/conrefs.dita#prod/product"/> 
			with its main components.</p>
		<image href="images/euca_cloud_arch_basics.png" scale="75"> 
		<alt>Image displaying user, cloud, zone, node, and networking components</alt>
		</image>
		
		<p>A detailed description of each <ph conref="../shared/conrefs.dita#prod/product"/> component follows.</p>
		<section><title>Cloud Controller</title>
			<p>In many deployments, the Cloud Controller (CLC) service and the User-Facing Services (UFS) are
				on the same host machine. This server is the entry-point into the cloud for
				administrators, developers, project managers, and end-users. The CLC handles
				persistence and is the backend for the UFS. A <ph
					conref="../shared/conrefs.dita#prod/product"/> cloud must have exactly one
				CLC.</p>
		</section>
		<section>
			<title>User-Facing Services</title>
			<p>The User-Facing Services (UFS) serve as endpoints for the AWS-compatible services offered by
				<ph conref="../shared/conrefs.dita#prod/product"/>: EC2 (compute), AS (AutoScaling), CW (CloudWatch), ELB (LoadBalancing),
				IAM (Euare), and STS (tokens). A <ph conref="../shared/conrefs.dita#prod/product"/> cloud can have several UFS host
				machines.</p>
		</section>
		<section>
			<title>Object Storage Gateway</title>
			<p>The Object Storage Gateway (OSG) is part of the UFS. The OSG passes requests to object storage providers and talks to the
				persistence layer (DB) to authenticate requests. You can use Walrus, Riak CS, or Ceph-RGW as the object storage provider.</p>
		</section>
		<section>
			<title>Object Storage Provider</title>
			<p>The Object Storage Provider (OSP) can be either the <ph
					conref="../shared/conrefs.dita#prod/product"/> Walrus backend, Riak CS, or
				Ceph-RGW. Walrus is intended for light S3 usage and is a single service. Riak CS is
				an open source scalable general purpose data platform created by <xref
					href="http://docs.basho.com/riakcs/latest/" format="html" scope="external"
					>Basho</xref>; it is intended for deployments with heavy S3 usage. Ceph-RGW is
				an object storage interface built on top of Librados.</p>
<!-- ADDed XREF TO CONTROLLED AVAILABILITY DOC-1849 -->
			<note>Ceph RGW is a Controlled Availability
				feature. For information about Controlled Availability features in <ph
					conref="../shared/conrefs.dita#prod/product"/>, see <xref
						href="../release-notes/4.3.0/4.3.0_rn_special_feature_release_support.dita#intro_special_feature_release"
					/>.</note>
		</section>
		<section>
			<title>Management Console</title>
			<p>The <ph conref="../shared/conrefs.dita#prod/product"/> Management Console is an easy-to-use
				web-based interface that allows you to manage your <ph
					conref="../shared/conrefs.dita#prod/product"/> cloud. The Management Console is
				often deployed on the same host machine as the UFS. A <ph
					conref="../shared/conrefs.dita#prod/product"/> cloud can have multiple
				Management Console host machines.</p>
		</section>
		<section><title>Cluster Controller</title>
			<p>The Cluster Controller (CC) service must run on a host machine that has network connectivity
				to the host machines running the Node Controllers (NCs) and to the host machine for
				the CLC. CCs gather information about a set of NCs and schedules virtual machine
				(VM) execution on specific NCs. All NCs associated with a single CC must be in the
				same subnet.</p>
		</section>
		<section><title>Storage Controller</title>
			<p>The Storage Controller (SC) service provides functionality similar to Amazon Elastic Block
				Store (Amazon EBS). The SC can interface with various storage systems. Elastic block
				storage exports storage volumes that can be attached by a VM and mounted or accessed
				as a raw block device. EBS volumes can persist past VM termination and are commonly
				used to store persistent data. An EBS volume cannot be shared between multiple VMs
				at once and can be accessed only within the same availability zone in which the VM
				is running. Users can create snapshots from EBS volumes. Snapshots are stored by the
				OSG and made available across availability zones. <ph
					conref="../shared/conrefs.dita#prod/product"/> with SAN support provides the
				ability to use your enterprise-grade SAN devices to host EBS storage within a <ph
					conref="../shared/conrefs.dita#prod/product"/> cloud.</p></section>
		<section><title>Node Controller</title>
			<p>The Node Controller (NC) service runs on any machine that hosts VM instances. The NC controls
				VM activities, including the execution, inspection, and termination of VM instances.
				It also fetches and maintains a local cache of instance images, and it queries and
				controls the system software (host OS and the hypervisor) in response to queries and
				control requests from the CC.</p></section>
		<section><title>Eucanetd</title>
			<p>The eucanetd service implements artifacts to manage and define <ph
					conref="../shared/conrefs.dita#prod/product"/> cloud networking. Eucanetd runs
				alongside the CLC, CC, and/or NC services, depending on the configured networking
				mode.</p></section>
	</conbody>
</concept>
