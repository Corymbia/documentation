<?xml version="1.0" encoding="UTF-8"?>
<!--This work by Eucalyptus Systems is licensed under a Creative Commons Attribution-ShareAlike 3.0 Unported License. See the accompanying LICENSE file for more information.-->
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA General Task//EN" "generalTask.dtd">
<task id="config_block_storage" props="subscribe">
    <!--    This general task template to be used for a PROCESS, a higher-level description, which points to specific procedures (tasks). -->

    <title>Configure Object Storage</title>
    <shortdesc>This topic describes how to configure object storage on the Object Storage Gateway
        (OSG) for the backend of your choice.</shortdesc>
    <taskbody>
        <context>
            <p>The OSG passes requests to object storage providers and talks to the persistence
                layer (DB) to authenticate requests. You can use Walrus, Riak CS, or Ceph-RGW as the
                object storage provider.</p>
            <ul id="about_walrus">
                <li>
                    <p><b>Walrus</b> - the default backend provider. It is a single-host <ph
                            conref="../shared/conrefs.dita#prod/product"/>-integrated provider which
                        provides basic object storage functionality for the small to medium scale.
                        Walrus is intended for light S3 usage.</p>
                </li>
            </ul>
            <p>
                <ul id="about_riak">
                    <li><b>Riak Cloud Storage (CS)</b> - an open source scalable general purpose
                        data platform created by Basho Technologies. It is intended for deployments
                        which have heavy S3 usage requirements where a single-host system like
                        Walrus would not be able to serve the volume of operations and amount of
                        data required.</li>
                </ul>
            </p>
            <p>
                <ul id="about_ceph">
                    <li><b>Ceph Rados Gateway (RGW)</b> - an object storage interface built on top
                        of Librados to provide applications with a RESTful gateway to Ceph Storage
                        Clusters. Ceph-RGW uses the Ceph Object Gateway daemon (radosgw), which is a
                        FastCGI module for interacting with a Ceph Storage Cluster. Since it
                        provides interfaces compatible with OpenStack Swift and Amazon S3, the Ceph
                        Object Gateway has its own user management. Ceph Object Gateway can store
                        data in the same Ceph Storage Cluster used to store data from Ceph
                        Filesystem clients or Ceph Block Device clients. The S3 and Swift APIs share
                        a common namespace, so you may write data with one API and retrieve it with
                        the other.</li>
                </ul>
                <!-- ADDed XREF TO CONTROLLED AVAILABILITY DOC-1849 -->
                <note><ph conref="../shared/conrefs.dita#prod/control_avail_ceph_rgw"/></note>
            </p>
            <p>You must configure the OSG to use one of the backend provider options.</p>
            <!--            <p>The note below should probably be more like the block storage "About the BROKEN State" topic. Maybe merge them into one?
TO DO: create an "About States" topic that describes ALL the states and then xref to it from various places in the docs. It probably belongs in Troubleshooting.</p>
-->
            <note>If OSG has been registered but not yet properly configured, it will be listed in
                the <codeph>broken</codeph> state when listed with the euserv-describe-services
                command. For example:</note>
            <codeblock>[root@g-26-03 ~]# euserv-describe-services --show-headers --filter service-type=objectstorage
SERVICE  TYPE              	ZONE    	NAME                   	  STATE	
SERVICE  objectstorage      user-api-1  user-api-1.objectstorage  broken</codeblock>
        </context>
        <!--    There are no steps in a general task. It's a collection, which points to the procedures below. -->
        <!--    The result tells me what to expect at the end of this process, and where to go next. Use CAUTION if this process will be reused 
            in a different context. Only include where to go next (you'll add an xref) when this is always the flow. -->

    </taskbody>
</task>
