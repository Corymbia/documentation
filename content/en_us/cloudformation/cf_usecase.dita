<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="cf_usecase">
 <title>CloudFormation Use Case</title>
	<shortdesc>This topic describes a use case for creating a stack, checking the stack progress, and deleting the stack.</shortdesc>
 <taskbody>
 	<context>
  <p>For this use case, we will use the following template:</p>
 	<codeblock>{
  "Parameters": {
    "MyImageId": {
      "Description":"Image id",
      "Type":"String"
    },
    "MyKeyPair": {
      "Description":"Key Pair",
      "Type":"String"
    }
  },
  "Resources" : {
    "MySecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Security Group with Ingress Rule for MyInstance",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      }
    },
    "MyInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId" : { "Ref":"MyImageId" },
        "SecurityGroups" : [ 
          { "Ref" : "MySecurityGroup" } 
        ],
        "KeyName" : { "Ref" : "MyKeyPair" }
      }
    }
  }
}</codeblock>
 		<p>This template creates an instance with a security group that allows global SSH access (port
 			22), but uses a keypair to log in. It requires two parameters, <codeph>MyImageId</codeph>, which
 			is the image ID of the instance to create, and <codeph>MyKeyPair</codeph>, which is the name of
 			the keypair to use to log in with. You can use both values with the
 			<codeph>euca-run-instances</codeph> command to create an instance manually (for example,
 			<codeph>euca-run-instances -k mykey emi-db0b2276</codeph>) so the arguments needed here are
 			standard instance arguments.</p>
 		<p>The steps to run this template through the system are explained in the following steps.</p>
 		<note type="important">These steps require that you have an available image (run
 			<codeph>euca-describe-images</codeph> to verify) and that the CloudFormation service is running
 			(run <codeph>euserv-describe-services</codeph> to verify).</note>
 	</context>
 	<steps>
 		<step>
 			<cmd>Verify connectivity to the CloudFormation service.</cmd>
 			<info>
 				<codeblock>euform-describe-stacks</codeblock>
 			</info>
 			<stepresult>You should not see anything returned, including any errors.</stepresult>
 		</step>
 		<step>
 			<cmd>Create a file called <filepath>ex_template.json</filepath> that contains the following
 				content:</cmd>
 			<info>
 				<codeblock>{
  "Parameters": {
    "MyImageId": {
      "Description":"Image id",
      "Type":"String"
    },
    "MyKeyPair": {
      "Description":"Key Pair",
      "Type":"String"
    }
  },
  "Resources" : {
    "MySecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Security Group with Ingress Rule for MyInstance",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      }
    },
    "MyInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId" : { "Ref":"MyImageId" },
        "SecurityGroups" : [ 
          { "Ref" : "MySecurityGroup" } 
        ],
        "KeyName" : { "Ref" : "MyKeyPair" }
      }
    }
  }
}</codeblock>
 			</info>
 		</step>
 		<step>
 			<cmd>Create a keypair.</cmd>
 			<info>
 				<codeblock>euca-create-keypair myKey > myKey.pem</codeblock>
 			</info>
 		</step>
 		<step>
 			<cmd>Set the permissions on the keypair.</cmd>
 			<info>
 				<codeblock>chmod 0600 myKey.pem</codeblock>
 			</info>
 		</step>
 		<step>
 			<cmd>Find what resources have been created., run the  command and the euca-describe-groups commands.  Make note of the output for later.</cmd>
 			<substeps>
 				<substep>
 					<cmd>Run:</cmd>
 					<info>
 						<codeblock>euca-describe-instances</codeblock>
 					</info>
 					<stepresult>Note the output for later use.</stepresult>
 				</substep>
 				<substep>
 					<cmd>Run:</cmd>
 					<info>
 						<codeblock>euca-describe-groups</codeblock>
 					</info>
 					<stepresult>Note the output for later use.</stepresult>
 				</substep>
 			</substeps>
 		</step>
 		<step>
 			<cmd>Create the stack.</cmd>
 			<info>
 				<codeblock>euform-create-stack --template-file ex_template.json -p  MyImageId=&lt;image_id>, MyKeyPair=
 myKey MyStack</codeblock>
 			</info>
 			<stepresult>Eucalyptus returns output similar to the following:
 		<codeblock>arn:aws:cloudformation::299958418681:stack/MyStack/28fd422b-0836-4374-ade2-eddab2fab3e3</codeblock>
 			</stepresult>
 		</step>
 		<step>
 			<cmd>Run the checks you want on your stack.</cmd>
 			<choices>
 				<choice>
 					<p>Check the status of the stack.</p>
 					<codeblock>euform-describe-stack
 STACK    MyStack    CREATE_COMPLETE    Complete!   2014-05-30T18:45:54.695Z</codeblock>
 				</choice>
 				<choice>
 					<p>Check the stack at any time to see all the events that have occurred during the stack lifecycle.</p>
 					<codeblock>euform-describe-stack-events MyStack
EVENT  MyStack  40de93ad-1aec-48c3-9c9e-680fe46ce194  AWS::CloudFormation::Stack  
MyStack  arn:aws:cloudformation::299958418681:stack/MyStack/28fd422b-0836-4374-
ade2-eddab2fab3e3  2014-05-30T18:45:54.747Z  CREATE_IN_PROGRESS   User Initiated
EVENT  MyStack  MySecurityGroup-CREATE_IN_PROGRESS-1401475554805   
AWS::EC2::SecurityGroup   MySecurityGroup   2014-05-30T18:45:54.805Z  CREATE_IN_
PROGRESS    
EVENT  MyStack  MySecurityGroup-CREATE_IN_PROGRESS-1401475555003  AWS::EC2::Secu
rityGroup  MySecurityGroup  MyStack-MySecurityGroup-PSLNKQK0BGY9A   2014-05-30T1
8:45:55.003Z   CREATE_IN_PROGRESS    
EVENT  MyStack  MySecurityGroup-CREATE_COMPLETE-1401475555170  AWS::EC2::Securit
yGroup MySecurityGroup  MyStack-MySecurityGroup-PSLNKQK0BGY9A  2014-05-30T18:45:
55.17Z CREATE_COMPLETE 
EVENT  MyStack  MyInstance-CREATE_IN_PROGRESS-1401475555228   AWS::EC2::Instance
MyInstance   	 2014-05-30T18:45:55.228Z    CREATE_IN_PROGRESS    
EVENT  MyStack  MyInstance-CREATE_IN_PROGRESS-1401475556078   AWS::EC2::Instance
MyInstance    i-d141ae0a    2014-05-30T18:45:56.078Z    CREATE_IN_PROGRESS    
EVENT  MyStack  MyInstance-CREATE_IN_PROGRESS-1401475566466   AWS::EC2::Instance
MyInstance    i-d141ae0a    2014-05-30T18:46:06.466Z    CREATE_IN_PROGRESS    
EVENT  MyStack  MyInstance-CREATE_COMPLETE-1401475566507      AWS::EC2::Instance 
MyInstance    i-d141ae0a    2014-05-30T18:46:06.507Z    CREATE_COMPLETE    
EVENT  MyStack  26e4445a-2f84-4239-90bf-e34e74fd646f  AWS::CloudFormation::Stack
MyStack  arn:aws:cloudformation::299958418681:stack/MyStack/28fd422b-0836-4374-a
de2-eddab2fab3e3 2014-05-30T18:46:06.574Z    CREATE_COMPLETE    Complete!</codeblock>
 				</choice>
 				<choice>
 					<p>Run <codeph>euca-describe-instances</codeph> and <codeph>euca-describe-groups</codeph> to make sure the new resources have been created.</p>
 					<codeblock>euca-describe-instances
RESERVATION    r-4ed04891   299958418681   MyStack-MySecurityGroup-PSLNKQK0BGY9A
INSTANCE    i-d141ae0a    emi-db0b2276   
euca-10-111-101-87.eucalyptus.g-19-10.autoqa.qa1.eucalyptus-systems.com  euca-1-
121-167-77.eucalyptus.internal   running   myKey   0   m1.small  2014-05-30T18:4
5:55.994Z   PARTI00   monitoring-disabled    10.111.101.87    1.121.167.77  
instance-store   hvm   sg-b4814192   TAG    instance    i-d141ae0a    euca:node 
10.111.1.135

euca-describe-groups
GROUP    sg-b4814192    299958418681    MyStack-MySecurityGroup-PSLNKQK0BGY9A   
Security Group with Ingress Rule for MyInstance    
PERMISSION    299958418681    MyStack-MySecurityGroup-PSLNKQK0BGY9A  ALLOWS  tcp
22    22    FROM    CIDR    0.0.0.0/0    ingress</codeblock>
 				</choice>
 			</choices>
 			
 		</step>
 		<step>
 			<cmd>Try to SSH into the instance.</cmd>
 			<info>
 				<codeblock>ssh -i myKey.pem root@10.111.101.87</codeblock>
 				<note type="tip">Username might depend on the instance type, and might be root or ubuntu or
 					ec2-user.</note>
 			</info>
 		</step>
 		<step>
 			<cmd>Delete the stack.</cmd>
 			<info>
 				<codeblock>euform-delete-stack MyStack</codeblock>
 			</info>
 			<stepresult>You can run <codeph>euca-describe-stacks</codeph> and all the other describe
 				commands to check the progress until the delete is complete.
 				
 				<p>Make sure the instance is terminated and that the security group no longer exists.</p>
 			</stepresult>
 		</step>
 	</steps>
 </taskbody>
</task>
